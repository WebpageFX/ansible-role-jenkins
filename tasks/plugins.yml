---
# jenkins_plugin module doesn't support password files.
- name: Get Jenkins admin password from file.
  slurp:
    src: "{{ jenkins_admin_password_file }}"
  register: adminpasswordfile
  no_log: true
  when: jenkins_admin_password_file | default(false)
  tags: ['skip_ansible_lint']

- name: Set Jenkins admin password fact.
  set_fact:
    jenkins_admin_password: "{{ adminpasswordfile['stdout'] | default(jenkins_admin_password) }}"
  no_log: true

# Update Jenkins so that plugin updates don't fail.
- name: Create Jenkins updates directory.
  file:
    path: "{{ jenkins_home }}/updates"
    state: directory
    owner: jenkins
    group: jenkins
    mode: 0755

- name: Download current plugin updates from Jenkins update site.
  get_url:
    url: "{{ jenkins_updates_url }}/update-center.json"
    dest: "{{ jenkins_home }}/updates/default.json"
    owner: jenkins
    group: jenkins
    mode: 0440
  changed_when: false
  register: get_result
  until: get_result is success
  retries: 3
  delay: 2

- name: Remove first and last line from json file.
  replace:  # noqa 208
    path: "{{ jenkins_home }}/updates/default.json"
    regexp: "1d;$d"

- name: Create Jenkins API token for admin user if not present
  shell: |
    # Groovy script to generate API token for Jenkins admin user if not present
    java -jar {{ jenkins_jar_location }} -s http://{{ jenkins_hostname }}:{{ jenkins_http_port }} groovy = <<EOF
    import hudson.security.*
    import jenkins.model.*
    import jenkins.security.*

    def instance = Jenkins.getInstance()

    // Fetch user details
    def user = hudson.model.User.get('{{ jenkins_admin_username }}')
    def apiTokenProperty = user.getProperty(ApiTokenProperty.class)

    // If the API token does not exist, generate a new one
    if (apiTokenProperty == null) {
        println "No API token found. Generating a new API token..."
        def result = apiTokenProperty.tokenStore.generateNewToken('defaultTokenName')
        // Save the API token to a file for later use
        new File("/tmp/jenkins_api_token").text = result.getTokenValue()
    } else {
        println "API token already exists."
    }

    user.save()
    EOF
  become: true  # Optional: Use this if you need elevated privileges
  register: api_token_creation_result
  changed_when: false  # The task is informational, we don't want it to show as changed unless the token is generated.
  when: jenkins_admin_password | default(false)

- name: Retrieve Jenkins API token from file
  ansible.builtin.slurp:
    src: /tmp/jenkins_api_token
  register: api_token_file
  when: api_token_creation_result.changed 

- name: Install Jenkins plugins using password.
  webfx.general.jenkins_plugin:
    name: "{{ item.name | default(item) }}"
    version: "{{ item.version | default(omit) }}"
    jenkins_home: "{{ jenkins_home }}"
    url_username: "{{ jenkins_admin_username }}"
    force_basic_auth: "{{ api_token_file is defined }}"
    url_password: "{{ api_token_file['content'] | b64decode if api_token_file is defined else jenkins_admin_password }}"
    state: "{{ 'present' if item.version is defined else jenkins_plugins_state }}"
    timeout: "{{ jenkins_plugin_timeout }}"
    updates_expiration: "{{ jenkins_plugin_updates_expiration }}"
    updates_url: "{{ jenkins_updates_url }}"
    url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}{{ jenkins_url_prefix }}"
    with_dependencies: "{{ jenkins_plugins_install_dependencies }}"
  with_items: "{{ jenkins_plugins }}"
  when: jenkins_admin_password | default(false)
  notify: restart jenkins
  tags: ['skip_ansible_lint']
  register: plugin_result
  until: plugin_result is success
  retries: 3
  delay: 2
